"=============================================================================
"     FileName: .vimrc
"         Desc: (g)Vim 8.0 running on: *nix,Cygwin,and Windows
"       Author: lll9p
"        Email: lll9p.china@gmail.com
"     HomePage: http://imtho.com
"      Version: 0.0.3
"   LastChange: 2017-02-04 10:47
"      History: created:2009/02
"=============================================================================
" 导入{{{
    " Windows操作模式{
    "source $VIMRUNTIME/mswin.vim
    " }
" }}}
" pre init settings{
"let $PATH =  "C:\\Users\\lao\\virtualenvs\\py3.7\\Scripts:".$PATH
"Add the virtualenv's site-packages to vim path
if has('win32') || has('win64')
let $SLASH='\'
" C语言Tags的路径{
if has('python3')
python3 << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'python-venv-scripts/activate_this.py')
    with open(activate_this) as f:
        exec(f.read(), dict(__file__=activate_this))
EOF
endif
endif
"let g:python3_host_prog = expand('C:\\Users\\lao\\virtualenvs\\py3.7\\Scripts\\python.exe')
" }
" let变量和set{{{
    " let{{{
        " windows{
        let $LANG='zh_CN.UTF-8'
        if has('win32') || has('win64')
            let $SLASH='\'
            " C语言Tags的路径{
            let $TLIST_C_TAGS = 'D:\apps\MinGW\include\tags'
            " }
            " }
        " *nix{
        elseif has('linux') || has('unix')
            let $SLASH='/'
            " C语言Tags的路径{
            let $TLIST_C_TAGS = '/usr/share/include/tags'
            " }
            " }
        " Cygwin{
        elseif has('win32unix')
            let $SLASH='/'
            " C语言Tags的路径{
            let $TLIST_C_TAGS = '/d/apps/MinGW/include/tags'
            " }
            " }
        endif
        " Vimfiles路径,可以放置插件{
        let $VIMFILES = $HOME.$SLASH.'.vimfiles'
        " }
        " 编辑时的备份所在文件夹{
        let $BACKUPDIR = $HOME.$SLASH.'.vimtmp'.$SLASH.'tmp'
        if !isdirectory($BACKUPDIR)
            call mkdir($BACKUPDIR,'p')
        endif
        " }
        " 交换文件夹{
        let $SWAPDIR = $HOME.$SLASH.'.vimtmp'.$SLASH.'swp//'
        if !isdirectory($SWAPDIR)
            call mkdir($SWAPDIR,'p')
        endif

        " }
        " 撤销文件夹{ 
        let $UNDODIR = $HOME.$SLASH.'.vimtmp'.$SLASH.'undodir'
        if !isdirectory($UNDODIR)
            call mkdir($UNDODIR,'p')
        endif
        "}
        let g:vimim_toggle='wubi,pinyin_fcitx'
        " view的路径{
        let $VIEWDIR=$HOME.$SLASH.'.vimtmp'.$SLASH.'view'
        if !isdirectory($VIEWDIR)
            call mkdir($VIEWDIR,'p')
        endif
        " }
        " 本配置文件路径{
        let $VIMRC = $HOME.$SLASH.'.vimrc'
        " }

        " 高亮C语言注释中的代码{
        let $c_comment_strings=1
        " }
        " php folding{
        let php_folding=2
        " }
    " }}}
    " 创建必要的目录{{{
        if isdirectory($UNDODIR)==0
            call mkdir($UNDODIR,'p')
        endif
        if isdirectory($BACKUPDIR)==0
            call mkdir($BACKUPDIR,'p')
        endif
        if isdirectory($SWAPDIR)==0
            call mkdir($SWAPDIR,'p')
        endif
        if isdirectory($VIEWDIR)==0
            call mkdir($VIEWDIR,'p')
        endif
    set runtimepath+=$VIMFILES
    " }}}
" Vundle {{{
    call plug#begin($VIMFILES.$SLASH."plugged")
    Plug 'vim-scripts/AuthorInfo'
    Plug 'vim-scripts/TaskList.vim'
    Plug 'Raimondi/delimitMate'
    Plug 'terryma/vim-multiple-cursors'
    "Plug 'vimwiki'
    "Plug 'vim-scripts/VimIM'
    "Plug 'lilydjwg/fcitx.vim'
    "Plug 'DrawIt'
    " Games
    "Plug 'TeTrIs.vim'
    "Plug 'Mines'
    "Plug 'Mastermind-board-game'
    "Plug 'tomasr/molokai'
    Plug 'altercation/vim-colors-solarized'
    Plug 'Rykka/riv.vim', {'for':['rst']} "take note in reStructuredText
    Plug 'dterei/VimBookmarking'
    Plug 'Shougo/denite.nvim'
    "{Unite and its plugins
    "Plug 'Shougo/unite.vim'
    "Plug 'Shougo/unite-outline'
    Plug 'Shougo/neomru.vim'
    "}
    Plug 'Shougo/neocomplete.vim'
    Plug 'mattn/calendar-vim'
    "Plug 'spolu/dwm.vim'
    Plug 'ynkdir/vim-paint'
    Plug 'Lokaltog/vim-easymotion'
    " Better undo tree tool
    Plug 'mbbill/undotree'
    Plug 'majutsushi/tagbar'
    Plug 'Yggdroot/indentLine'

    Plug 'scrooloose/nerdcommenter'
    Plug 'scrooloose/nerdtree'
    " Plug 'scrooloose/syntastic'
    Plug 'kovisoft/slimv'
    Plug 'ervandew/supertab'
    "Plug 'msanders/snipmate.vim'
    "Rust{
    Plug 'racer-rust/vim-racer', {'for':['rust']}
    Plug 'rust-lang/rust.vim', {'for':['rust']}
    "}
    "Plug 'mhinz/vim-startify'    
    "Plug 'derekwyatt/vim-scala'
    "Plug 'vimperator/vimperator.vim'
    Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
    Plug 'tpope/vim-surround'
    Plug 'godlygeek/tabular'
    Plug 'othree/xml.vim'
    "Plug 'ryanoasis/vim-devicons'
    Plug 'mattn/emmet-vim'
    "Plug 'tpope/vim-fugitive'
    Plug 'Chiel92/vim-autoformat'
    Plug 'w0rp/ale'
    " Syntax package
    Plug 'sheerun/vim-polyglot'
    "Python{
    "Plug 'rkulla/pydiction'
    "Plug 'jmcantrell/vim-virtualenv', {'for':['python']}
    Plug 'hdima/python-syntax', {'for':['python']}
    Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
    Plug 'hynek/vim-python-pep8-indent', {'for':['python']}
    Plug 'Glench/Vim-Jinja2-Syntax', {'for':['python']}
    Plug 'davidhalter/jedi-vim', {'for':['python']}
    Plug 'fisadev/vim-isort', {'for':['python']}
    "}
    Plug 'vim-latex/vim-latex',{'for':['latex','tex']}
    call plug#end()            " required
" }}}

    " set{{{
        " .vim路径{
        set runtimepath+=$VIMFILES
        "}
        " help lang{
        set helplang=cn,en
        " }
        " view的路径{
        set viewdir=$VIEWDIR
        " }
        set nohidden
        " 显示出光标所在坐标{
        set ruler
        " }
        " 打字时隐藏鼠标{
        set mousehide
        " }
        " 出错时闪烁屏幕{
        set visualbell
        " }
        " 是否兼容VI,compatible为兼容，nocompatible为不完全兼容
        " 如果设置为compatible，则tab将不会变成空格{
        set nocompatible
        " }
        " 定义退格键行为{
        set backspace=start,indent,eol
        " }
        " 自动补全命令时候使用菜单式匹配列表{
        set wildmenu
        " }
        " 允许退格键删除{
        set backspace=2
        " }
        " 设置可读{
        set modifiable
        " }
        " 开启备份{
        set backup
        " }
        " 设置备份文件路径,不然会保存在所编辑文件的同文件夹中{
        set backupdir=$BACKUPDIR
        " }
        " 设置交换文件路径,不然会保存在所编辑文件的同文件夹中{
        set directory=$SWAPDIR
        " }
        " 标尺的右边显示未完成的命令{
        set showcmd
        " }
        " 长行换行{
        set synmaxcol=120
        " }
        " 字符编码{{{
        " Vim显示的编码(设置这个不会改变文件的编码){
        if has('win32') || has('win64')
            set encoding=utf-8
            set termencoding=chinese
        endif
        if has('win32') || has('win64')
            set renderoptions=type:directx
        endif
        set bomb
        set binary
        set ttyfast
         "当使用vim-plug更新的时候，会出现乱码，设置以自动更改filetype
        "autocmd FileType vim-plug setlocal encoding=cp936 
        " }
        " 编辑已存在的文件时的参考文件编码.需要注意顺序,前面的字符集应该比后面的字符集大{
        set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
        " }
        " }}}
        " 告诉Vim在使用ex命令时也允许输入法{
        set imcmdline
        " }
        " *nix输入法设置,需要gui xim{
        "if has('linux') || has('unix')
        " 用来设置桌面系统控制输入法开关所使用的快捷键。
        " fcitx的激活键是Ctrl-space，Ctrl则是中英切换键。如果将imak设为Ctrl-space，则每次进入插入模式都是中文输入。
        " 将imak设为Ctrl则可以保留上一次退出插入模式时的输入状态。@http://blah.blogsome.com/2007/08/23/vim_cn_faq
        "set imactivatekey = C
        " 告诉Vim在搜索时使用输入法
        "set iminsert =2
        " 告诉Vim在搜索时使用输入法
        "set imsearch =2
        "endif
        " }
        " 重启后撤销历史可用 persistent undo {
        set undofile
        " }
        " undo保存文件夹{
        set undodir=$UNDODIR
        " }
        " 最大undo数{
        set undolevels=1000
        " }
        " 打开行号{
        set number
        set mousemodel=popup
        " }
        " 智能对齐方式{
        set smartindent
        " }
        " auto complete{
        "set completeopt=menuone,longest,preview
        " }
        " 自动折行{
        set wrap
        " }
        " 所有情况下开启鼠标{
        set mouse=a
        " }
        " 设置折叠模式{{{
        " 折叠层次
        set foldcolumn=4
        " 光标遇到折叠，折叠就打开
        "set foldopen=all
        " 移开折叠时自动关闭折叠
        "set foldclose=all
        " zf zo zc zd zr zm zR zM zn zi zN
        " 依缩进折叠
        "   manual  手工定义折叠
        "   indent  更多的缩进表示更高级别的折叠
        "   expr    用表达式来定义折叠
        "   syntax  用语法高亮来定义折叠
        "   diff    对没有更改的文本进行折叠
        "   marker  对文中的标志折叠
        set foldmethod=marker
        set foldmethod=indent
        "au BufWinLeave * silent mkview  " 保存文件的折叠状态
        "au BufRead * silent loadview    " 恢复文件的折叠状态
        nnoremap <space> za             " 用空格来切换折叠状态
        " 启动时不要自动折叠代码
        set foldlevel=99
        " }}}
        " Search mappings: These will make it so that going to the next one in a
        " search will center on the line it's found in.
        nnoremap n nzzzv
        nnoremap N Nzzzv
        "if has("gui_running")
       "     if has("gui_gtk2")
       "         set guifont=Luxi\ Mono\ 12
       "     elseif has("x11")
       "         " Also for GTK 1
       "         set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
       "     elseif has("gui_win32")
       "         "set guifontwide=Microsoft\ YaHei:h13
       "         set guifontwide=SimSun_simple:h12
       "         set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13
       "     endif
       " endif
        " 一个tab是4个字符{
        set tabstop=4
        " }
        " 按一次tab前进4个字符{
        set softtabstop=4
        " }
        " 用空格代替tab{
        set expandtab
        " }
        " 设置自动缩进{
        set autoindent!
        " }
        " 缩进的字符个数{
        set shiftwidth=4
        " } 
        " 显示中文引号{
        set ambiwidth=double
        " }
        " 行高亮{
        "set cursorline
        " }
        " 列高亮，与函数列表有冲突{
        "set cursorcolumn
        " }
        " 设置命令行的高度{
        "set cmdheight=2
        " }
        " 开启状态栏信息{
        set laststatus=2
        " }
        " 高亮搜索的关键字{
        set hlsearch
        " }
        " 在输入括号时光标会短暂地跳到与之相匹配的括号处，不影响输入{
        set showmatch
        " }
        " 正确地处理中文字符的折行和拼接{
        set formatoptions+=mM
        " }
        " 设定文件浏览器目录为当前目录{
        set browsedir=buffer
        " }
        " 自动切换当前目录为当前文件所在的目录{
        set autochdir               
        " }
        " 文件被别的编辑器修改时自动更新{
        set autoread
        " }
        " 保存文件的格式顺序{
        set fileformats=unix,dos,mac
        " }
        " GUI设置{{{
        if has('gui_running')
            " 设定菜单的语言为英文菜单{
            set langmenu=en_US.utf-8
            " }
            " 删去菜单{
            source $VIMRUNTIME$SLASH\delmenu.vim
            " }
            " 重建菜单{
            source $VIMRUNTIME$SLASH\menu.vim
            " }
            " 隐藏菜单栏{
            set guioptions-=m
            " }
            " 隐藏工具栏{
            set guioptions-=T
            " }
            " 隐藏左侧滚动条{
            set guioptions-=L
            " }
            " 隐藏右侧滚动条{
            set guioptions-=r
            " }
            " 隐藏底部滚动条{
            set guioptions-=b
            " }
            " 隐藏GUI Tab栏  {
            "set guioptions-=e 
            " }
            "set guifont=Consolas:h10:cANSI
            "set guifontwide=Microsoft\ Yahei\ Mono:h10
            set guifont=Fira_Code:h10:cANSI:qDRAFT
            set guifontwide=等距更纱黑体_SC:h10:cGB2312:qDRAFT
        endif
        " }}}
        " 显示CMD tab栏{
        "set showtabline=1
        " }
        " 实时搜索{
        set incsearch
        " }
        " 开启新行时使用智能自动缩进{
        set smartindent
        " }
        " make命令调用{
        set makeprg=mingw32-make
        " }
        " 排除CtrlP搜索的目录{
        if has('unix')
            set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
        elseif has('win32') || has('win64')
            set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
        endif
        let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|pyc)$'
        " }
        " {
        imap <A-h> <Left>
        imap <A-l> <Right>
        imap <A-k> <Up>
        imap <A-j> <Down>
        " }
        " 打印{{{
        if has('unix')
            set printencoding=utf-8
            set printmbcharset=iso10646
            set printfont=Microsoft_YaHei_Mono
            "要先在linux中安装相应的字体，并在ghostscript中配置好，如何配置见后文
            set printmbfont=r:Microsoft_YaHei_Mono
            "要先在linux中安装相应的字体，并在ghostscript中配置好，如何配置见后文
        elseif has('win32') || has('win64')
            " very dirty, but works
            map <Leader>p :let @m=&mod<CR>ggvG$"+yggvG$x:set enc=cp936<CR>:lang mes zh_CN<CR>"+P:ha<CR>ggvG$"+yggvG$x:set enc=utf-8<CR>:lang mes zh_CN.UTF-8<CR>"+P:if !@m<CR>w<CR>en<CR><CR>
        endif
        " }}}
        " }}}
        " }}}
        " 其他{{{
        if has('win32') || has('win64')
            " 解决consle输出乱码{
            language messages zh_CN.utf-8
            " }
        endif
        " 自动格式化代码
        noremap <F11> :Autoformat<CR><CR>
        " 语法高亮显示{
        syntax enable
        syntax on
        " 语法高亮自动更新
        autocmd BufEnter * :syntax sync fromstart
        " F12更新高亮
        noremap <F12> <Esc>:syntax sync fromstart<CR>
        inoremap <F12> <C-o>:syntax sync fromstart<CR>
        " }

        " ale {{{
        let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']
        let g:ale_sign_column_always = 1
        let g:ale_set_highlights = 0
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
        "文件内容发生变化时不进行检查
        let g:ale_lint_on_text_changed = 'never'
        "打开文件时不进行检查
        let g:ale_lint_on_enter = 0
        nmap <silent> <C-k> <Plug>(ale_previous_wrap)
        nmap <silent> <C-j> <Plug>(ale_next_wrap)
        "}}}
        " syntastic {{{
        " dependence
        " 1. shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck

        "let g:syntastic_always_populate_loc_list = 1
        "let g:syntastic_auto_loc_list = 1
        "let g:syntastic_error_symbol='>>'
        "let g:syntastic_warning_symbol='>'
        "let g:syntastic_check_on_open=1
        "let g:syntastic_check_on_wq=0
        "let g:syntastic_enable_highlighting=1

        " checkers
        " 最轻量
        " let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes
        " 中等
        " error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
        "let g:syntastic_python_checkers=['pyflakes', 'pep8'] " 使用pyflakes,速度比pylint快
        "let g:syntastic_python_pep8_args='--ignore=E501,E225,E124,E712'
        " 重量级, 但是足够强大, 定制完成后相当个性化
        " pylint codes: http://pylint-messages.wikidot.com/all-codes
        " let g:syntastic_python_checkers=['pyflakes', 'pylint'] " 使用pyflakes,速度比pylint快
        " let g:syntastic_python_checkers=['pylint'] " 使用pyflakes,速度比pylint快
        " let g:syntastic_python_pylint_args='--disable=C0111,R0903,C0301'

        if has('autocmd')
            " 记录文件状态(包括独立于该文件的键盘映射、代码折叠状态等){
            autocmd BufWinLeave * if expand('%') != '' && &buftype == '' | mkview | endif
            autocmd BufRead     * if expand('%') != '' && &buftype == '' | silent loadview | syntax on | endif
            " }
            " 开启文件类型检测{
            filetype on
            " }
            " 针对不同的文件类型采用不同的缩进格式{
            filetype indent on 
            " }
            " 针对不同的文件类型加载对应的插件{
            filetype plugin on
            " }
            " 启用自动补全{
            filetype plugin indent on
            " }
            " 设置python{
            "let g:SuperTabDefaultCompletionType="context"
            let g:SuperTabDefaultCompletionType="<C-x><C-o>"
            let g:SuperTabClosePreviewOnPopupClose=1
            autocmd BufNewFile,BufRead *.py,*.pyw setlocal filetype=python 
            "let g:neocomplete#enable_at_startup=1
            "let g:neocomplete#enable_auto_select=0
            autocmd FileType python setlocal foldmethod=indent completeopt=longest,menuone,preview omnifunc=jedi#completions
            if !exists('g:neocomplete#force_omni_input_patterns')
                    let g:neocomplete#force_omni_input_patterns = {}
            endif
            "let g:jedi#completions_enabled=0
            "let g:jedi#auto_vim_configuration=0
            let g:neocomplete#force_omni_input_patterns.python='\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
            " alternative pattern "'\%([^. \t]\.\|^\s*@\)\w*'
            "let g:jedi#auto_initialization = 0
            "let g:jedi#auto_vim_configuration = 1
            let g:jedi#popup_select_first=1
            let g:jedi#show_call_signatures="2"
            let g:jedi#force_py_version = 3
            let g:pymode_python = 'python3'
            let g:jedi#popup_on_dot=0
            let g:jedi#goto_command = "<leader>d"
            let g:jedi#goto_assignments_command = "<leader>g"
            let g:jedi#goto_definitions_command = ""
            let g:jedi#documentation_command = "K"
            let g:jedi#usages_command = "<leader>n"
            "let g:jedi#completions_command = "<C-Space>"
            let g:jedi#rename_command = "<leader>r"
            " setting isort
            let g:vim_isort_map = '<C-i>'
            let g:vim_isort_python_version="python3"
            " inoremap <TAB> {{{1
            " Next menu item, expand snippet, jump to next placeholder or insert literal tab
            let g:UltiSnipsJumpForwardTrigger="<NOP>"
            let g:ulti_expand_or_jump_res=0
            function! ExpandSnippetOrJumpForwardOrReturnTab()
                let snippet = UltiSnips#ExpandSnippetOrJump()
                if g:ulti_expand_or_jump_res>0
                    return snippet
                else
                    return "\<TAB>"
                endif
            endfunction
            inoremap <expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ "<C-R>=ExpandSnippetOrJumpForwardOrReturnTab()<CR>"

            " }
            " 设置scheme,lisp{
            autocmd BufNewFile,BufRead *.lisp,*.scheme setlocal filetype=lisp
            " }
            " 设置php,html,js{
            autocmd FileType php setlocal foldmethod=syntax
            autocmd BufRead,BufNewFile *.php setlocal filetype=php.html
            autocmd BufRead,BufNewFile *.html setlocal foldmethod=indent filetype=html
            autocmd FileType js setlocal foldmethod=indent
            autocmd BufNewFile,BufRead *.rs setlocal filetype=rust foldmethod=syntax
            " }
            " 设置Rust{
            "" 关闭rust的自动reformat的功能
            let g:rustfmt_autosave = 0

            "" 编译出来的racer所在的路径
            let g:racer_cmd = "C:\\Users\\lao\\.cargo\\bin\\racer"
            let $RUST_SRC_PATH="D:\\apps\\RUST_SRC\\rustc-1.8.0\\src\\"
            let g:formatdef_rustfmt = '"rustfmt"'
            let g:formatters_rust = ['rustfmt']
            " }
            " 把下面放到autocmdgroup中,以便删除{
            augroup vimrcEx
                autocmd!
                " 文本文件从左起到78个字符时自动折行{
                autocmd FileType text setlocal textwidth=78
                " }
                " 编辑时跳到上一次光标位{
                autocmd BufReadPost *
                            \ if line("'\"") > 1 && line("'\"") <= line("$") |
                            \   exe "normal! g`\"" |
                            \ endif
                " }
            augroup END
            " }
        else
            " 自动缩进{
            set autoindent
            " }
        endif
        " 设置配色{
        let g:solarized_termcolors=256
        set background=light
        colorscheme solarized
        " }
        " 自动载入 vimrc{
        autocmd! bufwritepost $VIMRC source % 
        " }
        " }}}
        " }}}
        " map{{{
        " 定义Xterm的shift-insert行为 {
        map <S-Insert> <MiddleMouse>
        map! <S-Insert> <MiddleMouse>
        " }
        " 打开和关闭标签{
        map tn :tabnew 
        map td :tabclose
        " }
        " 窗口分割设置{
        map <c-j> <c-w>j
        map <c-k> <c-w>k
        map <c-l> <c-w>l
        map <c-h> <c-w>h
        " }
        " Add time to the file {
        nmap <F2> a<C-R>=strftime("%Y-%m-%d %H:%M")<CR><Esc>
        imap <F2> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>
        " }
        " Add pelican hearders {
        function! Pelican_header() 
            "let line_num = line(".")
            let line_num = 0
            call append(line_num+0,"")
            call append(line_num+1,"###")
            call append(line_num+2,":date: ".strftime("%Y-%m-%d %I:%M")) 
            call append(line_num+3,":modified: ".strftime("%Y-%m-%d %I:%M")) 
            call append(line_num+4,":status: draft") 
            call append(line_num+5,":category: ") 
            call append(line_num+6,":tags: ") 
            call append(line_num+7,":series: ") 
            call append(line_num+8,":slug: ") 
            call append(line_num+9,":authors: ") 
        endfunction
        map <leader>ii <Esc>:call Pelican_header()<CR><Esc>
        " }
        " Tasklist{
        map <leader>td <Plug>TaskList
        " }
        " Revision History{
        " replaced with undotree
        map <leader>z :UndotreeToggle<CR>
        " }
        " Denite.nvim Settings {
        " Most Recent Use MRU
        map <leader>m :Denite file_mru<CR>
        " Change file_rec command.
        call denite#custom#var('file_rec', 'command',
	    \ ['ag', '--depth', '5', '--max-count', '500', '--follow', '--nocolor', '--nogroup', '-g', ''])
        " Ag command on grep source
        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'default_opts',
                \ ['-i', '--vimgrep'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#option('default', 'empty', 0)
	    call denite#custom#option('default', 'auto_resize', 1)
        " Change ignore_globs
        call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
              \ [ '.git/', '.ropeproject/', '__pycache__/',
              \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
        " }
        " 模糊搜索{
        "nmap <leader>A <Esc>:Ack!
        " }
        " 让编辑模式可以中文输入法下按：转到命令模式{
        nnoremap ： :
        " }
        " Autoformat{
        let g:formatprg_scala = "java"
        let g:formatprg_args_scala = " -jar ".$VIMFILES."/formatter/scala/scalariform.jar -f -q --encoding=UTF-8 --preferenceFile=".$VIMFILES."/formatter/scala/formatterPreferences.properties --stdin --stdout"
        "let g:formatdef_autopep8 = "'C:/Users/lao/virtualenvs/py3.7/Scripts/autopep8 - --range '.a:firstline.' '.a:lastline"
        let g:formatters_python = ['autopep8']
        " }
        "ultisnips设置{
        " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsJumpForwardTrigger="<c-tab>"
        let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

        " If you want :UltiSnipsEdit to split your window.
        let g:UltiSnipsEditSplit="vertical"
        "}
        " 快速编译、运行{
        " 改进自http://blog.csdn.net/erazy0/article/details/5448850
        noremap <F8> :call CompileCode(1)<CR>
        noremap <leader>cp :call CompileCode(2)<CR>
        noremap <F9> :call RunResult()<CR>
        noremap <F10> :call CompileRun()<CR>
        "{{{
        function! CompileFunc(compiler)
            execute "w"

            " 使用GCC还是G++{{{
            if a:compiler == 0
                if has('win32') || has('win64')
                    set makeprg=gcc\ -o\ \"%<.exe\"\ \"%\"
                else
                    set makeprg=gcc\ -o\ \"%<\"\ \"%\"
                endif
            elseif a:compiler == 1
                if has('win32') || has('win64')
                    set makeprg=g++\ -o\ \"%<.exe\"\ \"%\"
                else
                    set makeprg=g++\ -o\ \"%<\"\ \"%\"
                endif
            elseif a:compiler == 2
                if has('win32') || has('win64')
                    set makeprg=arm-linux-gnueabihf-gcc\ -o\ \"%<\"\ \"%\"
                else
                    set makeprg=arm-linux-gnueabihf-gcc\ -o\ \"%<\"\ \"%\"
                endif
            endif
            "}}}
            if search("glut\.h") != 0
                set makeprg+=\ -lglut -lGLU -lGL\ 
            endif
            if search("cv\.h") != 0
                set makeprg+=\ -lcv -lhighgui -lcvaux\ 
            endif
            if search("omp\.h") != 0
                set makeprg+=\ -fopenmp\ 
            endif
            if search("math\.h") != 0
                set makeprg+=\ -lm\ 
            endif
            if search("wiringPi\.h") != 0
                set makeprg+=\ -lwiringPi\ 
            endif
            if has('win32') || has('win64') && a:compiler != 2
                set makeprg+=\ -fexec-charset=gb18030\ 
            endif
            execute "silent make"
            execute "normal :"
            execute "cwindow"
        endfunction

        func! RunPython()
            execute "silent !python \"%\""
        endfunction
        func! RunScheme()
            exec "! mit-scheme --library \"D:\\apps\\MIT-GNU Scheme\\lib\" --load ".expand("%:p")
        endfunction
        func! CompileJava()
            execute "silent !javac \"%\""
            execute "cwindow"
        endfunction
        func! CompileScala()
            execute "silent !scalac \"%\""
            execute "cwindow"
        endfunction
        func! RunScala()
            execute "silent !scala \"%\""
        endfunction
        function! CompileCode(compiler)
            exec "w"
            if a:compiler == 2
                execute "call CompileFunc(2)"
            elseif &filetype == "cpp"
                execute "call CompileFunc(1)"
            elseif &filetype == "c"
                execute "call CompileFunc(0)"
            elseif &filetype == "python"
                execute "call RunPython()"
            elseif &filetype == "java"
                execute "call CompileJava()"
            elseif &filetype == "scala"
                execute "call CompileScala()"
            endif
        endfunction

        function! RunResult()
            execute "w"
            if &filetype == "cpp"
                if has('win32') || has('win64')
                    execute "silent ! \"%:p:r.exe\""
                else
                    execute "silent ! \"./%<\""
                endif
            elseif &filetype == "c"
                if has('win32') || has('win64')
                    set encoding=cp936
                    execute "silent ! \"%:p:r.exe\""
                    set encoding=utf8
                else
                    execute "silent ! \"./%<\""
                endif
            elseif &filetype == "python"
                execute "call RunPython()"
            elseif &filetype == "rust"
                execute "RustRun"
            elseif &filetype == "scala"
                execute "call RunScala()"
            elseif &filetype == "java"
                execute "silent !java \"%<\""
            elseif &filetype=='scheme'
                execute "call RunScheme()"
            endif
            execute "normal :"            
        endfunction
        function! CompileRun()
            execute "call CompileCode(1)"
            execute "call RunResult()"
        endfunction

        "map <F5> :call CompileCode()<CR>
        "imap <F5> <ESC>:call CompileCode()<CR>
        "vmap <F5> <ESC>:call CompileCode()<CR>
        "map <F6> :call RunResult()<CR>
        "}}}
        " }
        " }}}
        " 插件配置{{{
        " Vim-Tex{
        let g:Tex_CompileRule_pdf='xelatex --synctex=-1 -src-specials -interaction=nonstopmode $*'
        let g:Tex_DefaultTargetFormat='pdf'
        let g:Tex_ViewRule_pdf='SumatraPDF -reuse-instance -inverse-search "gvim -c \":RemoteOpen +\%l \%f\""'
        let g:Tex_MultipleCompileFormats='pdf'
        " }
        "设置SuperTab的默认补全操作为<C-X><C-U>{
        "let g:SuperTabDefaultCompletionType = '<C-X><C-U>'
        " 
        " 启动、打开新标签页时自动打开nerdtree{
        "autocmd BufWinEnter * NERDTree 
        " }
        " 只剩下NERDTree后自动关Vim{
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
        " }
        "" NERDTree configuration
        let g:NERDTreeChDirMode=2
        let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
        let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
        let g:NERDTreeShowBookmarks=1
        let g:nerdtree_tabs_focus_on_files=1
        let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
        let g:NERDTreeWinSize = 50
        set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
        "nnoremap <silent> <F2> :NERDTreeFind<CR>
        noremap <F6> :NERDTreeToggle<CR>

        " grep.vim
        nnoremap <silent> <leader>f :Rgrep<CR>
        let Grep_Default_Options = '-IR'
        let Grep_Skip_Files = '*.log *.db'
        let Grep_Skip_Dirs = '.git node_modules'

"*****************************************************************************
"" Functions
"*****************************************************************************
if !exists('*s:setupWrapping')
  function s:setupWrapping()
    set wrap
    set wm=2
    set textwidth=79
  endfunction
endif

"*****************************************************************************
"" Autocmd Rules
"*****************************************************************************
"" The PC is fast enough, do syntax highlight syncing from start unless 200 lines
augroup vimrc-sync-fromstart
  autocmd!
  autocmd BufEnter * :syntax sync maxlines=200
augroup END

"" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

"" txt
augroup vimrc-wrapping
  autocmd!
  autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
augroup END

"" make/cmake
augroup vimrc-make-cmake
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
augroup END

set autoread

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>e :FZF -m<CR>
        " Tagbar{{{
        map <silent> <F7> :TagbarToggle<cr> 
let g:tagbar_autofocus = 1
" Disable visualbell
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif
"" Vmap for maintain Visual Mode after shifting > and <
vmap < <gv
vmap > >gv

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
"" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif
" python
" vim-python
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8 colorcolumn=79
      \ formatoptions+=croq softtabstop=4
      \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
augroup END

" Syntax highlight
" Default highlight is better than polyglot
let g:polyglot_disabled = ['python']
let python_highlight_all = 1


        
        " tags
        " For C/C++
        set tags+=$TLIST_C_TAGS
        " For Java
        "set tags+=C:\Develop\Java\src\tags
        " For Python 3.x
        "set tags+=C:\Develop\Python\Python32\Lib\tags
        " }}}
        " AuthorInfo {{{
        let $AuthorInfoPath=$VIMFILES.$SLASH.'plugged'.$SLASH.'AuthorInfo'.$SLASH.'ftplugin'.$SLASH.'authorinfo.vim'
        source $AuthorInfoPath
        let g:vimrc_author='lll9p'
        let g:vimrc_email='lll9p.china@gmail.com'
        let g:vimrc_homepage='http://imtho.com'
        nmap <leader>ai :AuthorInfoDetect<CR> 
        " }}}
        if &lines > 25
            set laststatus=2
        endif
        au GUIEnter * if &lines > 25 | set laststatus=2 | endif
                                        " When running the GUI, the number of lines
                                        " isn't known until the GUI is opened.
        if exists("##VimResized")
            " 'laststatus' may have been set to 2 by ctags plugin.  Don't set it back
            " to 1 or set it to 2 if already 2 (or 0).
            au VimResized * if &lines > 25 && &laststatus == 1 | set laststatus=2 | endif
        endif
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction
        set ruler 
        " statusline{
        set statusline=
        set statusline+=%7*\[%n]                                  "buffernr
        set statusline+=%1*\ %<%F\                                "File+path
        set statusline+=%2*\ %y\                                  "FileType
        set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}      "Encoding
        set statusline+=%3*\ %{(&bomb?\",BOM\":\"\")}\            "Encoding2
        set statusline+=%4*\ %{&ff}\                              "FileFormat (dos/unix..) 
        set statusline+=%5*\ %{&spelllang}\%{HighlightSearch()}\  "Spellanguage & Highlight on?
        set statusline+=%#warningmsg#
        set statusline+=%{LinterStatus()}
        set statusline+=%*
        set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)\             "Rownumber/total (%)
        set statusline+=%9*\ col:%03c\                            "Colnr
        set statusline+=%0*\ \ %m%r%w\ %P\ \                      "Modified? Readonly? Top/bot.
        function! HighlightSearch()
          if &hls
            return 'H'
          else
            return ''
          endif
        endfunction
       hi User1 guifg=#ffdad8  guibg=#880c0e
       hi User2 guifg=#000000  guibg=#F4905C
       hi User3 guifg=#292b00  guibg=#f4f597
       hi User4 guifg=#112605  guibg=#aefe7B
       hi User5 guifg=#051d00  guibg=#7dcc7d
       hi User7 guifg=#ffffff  guibg=#880c0e gui=bold
       hi User8 guifg=#ffffff  guibg=#5b7fbb
       hi User9 guifg=#ffffff  guibg=#810085
       hi User0 guifg=#ffffff  guibg=#094afe

        "set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
        " }

        " }}}
        " }}}
        " }}}
        "{
        cd $HOME$SLASH".vimtmp"
        "}
        " vim: set ft=vim :
